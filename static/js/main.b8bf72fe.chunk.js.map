{"version":3,"sources":["components/SeasonDisplay.jsx","components/Spinner.jsx","index.js"],"names":["seasonConfig","winter","text","iconName","summer","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","class","message","defaultProps","App","state","errorMsg","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","error","this","renderContent","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iMAIMA,G,MAAa,CACfC,OAAO,CACHC,KAAK,qBACLC,SAAS,aAEbC,OAAO,CACHF,KAAK,sBACLC,SAAS,SAwBFE,EAZO,SAACC,GACrB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIC,EAETP,EAAaS,GAA5BP,EAFwB,EAExBA,KAAKC,EAFmB,EAEnBA,SACZ,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC5BZU,EAAU,SAACP,GACf,OACE,yBAAKQ,MAAM,oBACT,yBAAKA,MAAM,kBAAkBR,EAAMS,WAKzCF,EAAQG,aAAa,CACjBD,QAAQ,cAGGF,QCRTI,E,4MACJC,MAAQ,CAAEX,IAAK,KAAMY,SAAU,I,kEAEV,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAElB,IAAKiB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAW,EAAKH,SAAS,CAAEN,SAAUS,EAAMb,e,sCAK7C,OAAIc,KAAKX,MAAMC,WAAaU,KAAKX,MAAMX,IAC9B,uCAAasB,KAAKX,MAAMC,WACrBU,KAAKX,MAAMC,UAAYU,KAAKX,MAAMX,IACrC,kBAAC,EAAD,CAAeA,IAAKsB,KAAKX,MAAMX,MAE/B,kBAAC,EAAD,CAASQ,QAAQ,yC,+BAK1B,OAAQ,yBAAKH,UAAU,cAAciB,KAAKC,qB,GArB5BC,IAAMC,WAyBxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.b8bf72fe.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './SeasonDisplay.css';\r\n\r\nconst seasonConfig={\r\n    winter:{\r\n        text:\"Burr, it is chilly\",\r\n        iconName:'snowflake'\r\n    },\r\n    summer:{\r\n        text:\"Let's hit the beach\",\r\n        iconName:'sun'\r\n    },\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat > 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n  const {text,iconName}=seasonConfig[season];\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`icon-left massive ${iconName} icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div class=\"ui active dimmer\">\r\n      <div class=\"ui text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps={\r\n    message:'Loading...',\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport SeasonDisplay from \"./components/SeasonDisplay\";\nimport Spinner from \"./components/Spinner\";\n\nclass App extends React.Component {\n  state = { lat: null, errorMsg: \"\" };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      (position) => this.setState({ lat: position.coords.latitude }),\n      (error) => this.setState({ errorMsg: error.message })\n    );\n  }\n\n  renderContent() {\n    if (this.state.errorMsg && !this.state.lat) {\n      return <div>Error: {this.state.errorMsg}</div>;\n    } else if (!this.state.errorMsg && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    } else {\n      return <Spinner message=\"Please accept the location request\" />;\n    }\n  }\n\n  render() {\n    return (<div className=\"border red\">{this.renderContent()}</div>);\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}